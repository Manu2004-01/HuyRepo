// <auto-generated />
using System;
using EatIT.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EatIT.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    partial class ApplicationDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EatIT.Core.Entities.Dishes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DishDescription")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<string>("DishImage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DishName")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)");

                    b.Property<decimal>("DishPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<bool>("IsVegan")
                        .HasColumnType("bit");

                    b.Property<int>("ResId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ResId");

                    b.ToTable("Dishes");
                });

            modelBuilder.Entity("EatIT.Core.Entities.Favorites", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DishId")
                        .HasColumnType("int");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DishId");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("UserId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("EatIT.Core.Entities.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<int>("Star")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("UserId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("EatIT.Core.Entities.Restaurants", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("OpeningHours")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ResAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ResName")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("RestaurantImg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TagId");

                    b.HasIndex("UsersId");

                    b.ToTable("Restaurants");
                });

            modelBuilder.Entity("EatIT.Core.Entities.Tags", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("TagImg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TagName = "Cơm tấm"
                        },
                        new
                        {
                            Id = 2,
                            TagName = "Món nước"
                        },
                        new
                        {
                            Id = 3,
                            TagName = "Trà sữa"
                        },
                        new
                        {
                            Id = 4,
                            TagName = "Thức ăn nhanh"
                        },
                        new
                        {
                            Id = 5,
                            TagName = "Bánh mì"
                        },
                        new
                        {
                            Id = 6,
                            TagName = "Chè & Tráng miệng"
                        },
                        new
                        {
                            Id = 7,
                            TagName = "Cà phê & Nước uống"
                        },
                        new
                        {
                            Id = 8,
                            TagName = "Hải sản"
                        },
                        new
                        {
                            Id = 9,
                            TagName = "Nướng & BBQ"
                        },
                        new
                        {
                            Id = 10,
                            TagName = "Lẩu"
                        },
                        new
                        {
                            Id = 11,
                            TagName = "Quán nhậu/Bia hơi"
                        },
                        new
                        {
                            Id = 12,
                            TagName = "Ăn vặt/Vỉa hè"
                        },
                        new
                        {
                            Id = 13,
                            TagName = "Cơm văn phòng"
                        },
                        new
                        {
                            Id = 14,
                            TagName = "Chay"
                        },
                        new
                        {
                            Id = 15,
                            TagName = "Ẩm thực miền Bắc"
                        },
                        new
                        {
                            Id = 16,
                            TagName = "Ẩm thực miền Trung"
                        },
                        new
                        {
                            Id = 17,
                            TagName = "Ẩm thực miền Nam"
                        },
                        new
                        {
                            Id = 18,
                            TagName = "Ẩm thực Tây Âu"
                        },
                        new
                        {
                            Id = 19,
                            TagName = "Ẩm thực Nhật/Hàn/Trung"
                        });
                });

            modelBuilder.Entity("EatIT.Core.Entities.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleName = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            RoleName = "Người dùng"
                        },
                        new
                        {
                            Id = 3,
                            RoleName = "Nhà hàng"
                        });
                });

            modelBuilder.Entity("EatIT.Core.Entities.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Allergy")
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Diet")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Dislike")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLocationUpdate")
                        .HasColumnType("datetime");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Preference")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ResetPasswordToken")
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("ResetPasswordTokenExpiry")
                        .HasColumnType("datetime");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UserAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("UserImg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("UserLatitude")
                        .HasColumnType("float");

                    b.Property<double?>("UserLongitude")
                        .HasColumnType("float");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateAt = new DateTime(2025, 8, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@eatit.com",
                            IsActive = true,
                            Password = "123456",
                            PhoneNumber = "0382727683",
                            RoleId = 1,
                            UpdateAt = new DateTime(2025, 8, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserAddress = "Thành phố Hồ Chí Minh",
                            UserName = "Admin Huy Che"
                        },
                        new
                        {
                            Id = 2,
                            CreateAt = new DateTime(2025, 8, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user@eatit.com",
                            IsActive = true,
                            Password = "654321",
                            PhoneNumber = "0912345678",
                            RoleId = 2,
                            UpdateAt = new DateTime(2025, 8, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserAddress = "Hà Nội",
                            UserName = "Huy Che"
                        },
                        new
                        {
                            Id = 3,
                            CreateAt = new DateTime(2025, 8, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "restaurant@eatit.com",
                            IsActive = true,
                            Password = "111111",
                            PhoneNumber = "0912345678",
                            RoleId = 3,
                            UpdateAt = new DateTime(2025, 8, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserAddress = "Đà Nẵng",
                            UserName = "Nhà hàng đồ ăn"
                        });
                });

            modelBuilder.Entity("EatIT.Core.Entities.Dishes", b =>
                {
                    b.HasOne("EatIT.Core.Entities.Restaurants", "Restaurant")
                        .WithMany("Dishes")
                        .HasForeignKey("ResId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("EatIT.Core.Entities.Favorites", b =>
                {
                    b.HasOne("EatIT.Core.Entities.Dishes", "Dish")
                        .WithMany("Favorites")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("EatIT.Core.Entities.Restaurants", "Restaurant")
                        .WithMany("Favorites")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("EatIT.Core.Entities.Users", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("Restaurant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EatIT.Core.Entities.Rating", b =>
                {
                    b.HasOne("EatIT.Core.Entities.Restaurants", "Restaurant")
                        .WithMany("Ratings")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("EatIT.Core.Entities.Users", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EatIT.Core.Entities.Restaurants", b =>
                {
                    b.HasOne("EatIT.Core.Entities.Tags", "Tag")
                        .WithMany("Restaurants")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("EatIT.Core.Entities.Users", null)
                        .WithMany("Restaurants")
                        .HasForeignKey("UsersId");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("EatIT.Core.Entities.Users", b =>
                {
                    b.HasOne("EatIT.Core.Entities.UserRole", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("EatIT.Core.Entities.Dishes", b =>
                {
                    b.Navigation("Favorites");
                });

            modelBuilder.Entity("EatIT.Core.Entities.Restaurants", b =>
                {
                    b.Navigation("Dishes");

                    b.Navigation("Favorites");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("EatIT.Core.Entities.Tags", b =>
                {
                    b.Navigation("Restaurants");
                });

            modelBuilder.Entity("EatIT.Core.Entities.UserRole", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("EatIT.Core.Entities.Users", b =>
                {
                    b.Navigation("Favorites");

                    b.Navigation("Ratings");

                    b.Navigation("Restaurants");
                });
#pragma warning restore 612, 618
        }
    }
}
